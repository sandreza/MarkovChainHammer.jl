var documenterSearchIndex = {"docs":
[{"location":"transition_matrix/#sec:transition_matrix","page":"TransitionMatrix","title":"Transition Matrix","text":"","category":"section"},{"location":"transition_matrix/","page":"TransitionMatrix","title":"TransitionMatrix","text":"This module creates several convenience functions for construction transfer operators and generators from Markov chains. The two most useful functions are  the generator function and the perron_frobenius functions.","category":"page"},{"location":"utils/#sec:utilities","page":"Utils","title":"Utils","text":"","category":"section"},{"location":"utils/","page":"Utils","title":"Utils","text":"The most useful function is the histogram function which can be used alongside GLMakie to make barplots of the distribution of states in a Markov chain. ","category":"page"},{"location":"mch_methods/#sec:markov_chains","page":"Overview","title":"Markov Chains","text":"","category":"section"},{"location":"mch_methods/","page":"Overview","title":"Overview","text":"This repository gathers various convenience tools for analyzing and generating Markov Chains with a finite state space. ","category":"page"},{"location":"mch_methods/","page":"Overview","title":"Overview","text":"The following section contains a review of Markov Chains and how to use some of the basic functionality of the repository ","category":"page"},{"location":"mch_methods/","page":"Overview","title":"Overview","text":"Basics","category":"page"},{"location":"basics/#sec:basics","page":"Basics","title":"Basics","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"Markov chains are a stochastic process whose future state only depends on the current state. In this repository we only consider Markov chains with a finite state space, thus the transition probabilities are characterized by matrix. ","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"The convention taken in this repository is that all transfer operators are column stochastic. For example, the following 2 times 2  column stochastic matrix characterizes a Markov chain made up of 2 discrete states,","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"beginaligned\n    mathcalM =\n    beginbmatrix\n    06  03 \n    04  07\n    endbmatrix\nendaligned","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"The first column, c_1,","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"beginaligned\n    c_1 =\n    beginbmatrix\n    06 \n    04 \n    endbmatrix\nendaligned","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"gives information about what happens to a link in the chain that is state 1. The probability, mathcalM_11, of staying in state 1 given that we are in state 1 is mathcalM_11 = 06 and the probability of going to state 2 given that we are in state 1 is mathcalM_11 = 04. Similarly, the second column, c_2,","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"beginaligned\n    c_2 =\n    beginbmatrix\n    03 \n    07\n    endbmatrix\nendaligned","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"gives information about what happens to a link in the chain that is state 2. The probability, mathcalM_22, of staying in state 2 given that we are in state 2 is mathcalM_22 = 07 and the probability of going to state 1 given that we are in state 2 is mathcalM_21 = 03. ","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"A sample markov chain is constructed from a transfer operator using generate function from the MarkovChainHammer.Trajectory module. The following code snippet constructs 10 steps of a Markov chain from the transfer operator mathcalM above.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"using MarkovChainHammer.Trajectory: generate\nusing Random\nRandom.seed!(1234)\nℳ = [0.6 0.3; 0.4 0.7]\nsteps = 10\nmarkov_chain = generate(ℳ, steps)'","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"The Markov chain is but one possible realization of the stochastic process. If we were to run the generate function again, we would get a different realization of the Markov chain,","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"markov_chain = generate(ℳ, steps)'","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"If the number of steps is not specified, then the code attempts to generated a chain with roughly 10,000 independent samples of the process based on a decorrelation time threshold,  ","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"markov_chain = generate(ℳ)'","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"Here we see that a large chain was generated.","category":"page"},{"location":"clustering/#sec:clustering","page":"Clustering","title":"Clustering","text":"","category":"section"},{"location":"clustering/","page":"Clustering","title":"Clustering","text":"In a community detection problem the goal is to find communities from network information. In this case we don't have an adjacency matrix, but rather a transfer operator. Thus connections between vertices are not just given by 0's and 1's, but rather by a continuum of numbers in between.","category":"page"},{"location":"function_index/#sec:function_index","page":"Function Index","title":"List of functions in MarkovChainHammer","text":"","category":"section"},{"location":"function_index/","page":"Function Index","title":"Function Index","text":"Modules = [ MarkovChainHammer.TransitionMatrix, MarkovChainHammer.Trajectory, MarkovChainHammer.Clustering, MarkovChainHammer.Utils]","category":"page"},{"location":"function_index/#MarkovChainHammer.TransitionMatrix.generator-Tuple{Any}","page":"Function Index","title":"MarkovChainHammer.TransitionMatrix.generator","text":"generator(markov_chain; dt=1)\n\nDescription\n\nCalculate the generator matrix from a markov chain.\n\nArguments\n\nmarkov_chain::AbstractVector: A vector of integers representing the state of a markov chain at each time step.\ndt::Real: The time step between each state.\n\nReturns\n\ngenerator_matrix::Matrix: The generator matrix of the markov chain.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#MarkovChainHammer.TransitionMatrix.holding_times-Tuple{Any, Any}","page":"Function Index","title":"MarkovChainHammer.TransitionMatrix.holding_times","text":"holding_times(markov_chain, number_of_states; dt=1)\n\nDescription\n\nCalculate the holding times of a markov chain.\n\nArguments\n\nmarkov_chain::AbstractVector: A vector of integers representing the state of a markov chain at each time step.\nnumber_of_states::Integer: The number of states in the markov chain.\ndt::Real: The time step of the markov chain.\n\nReturns\n\nholding_times::Vector{Vector{Real}}: A vector of vectors of holding times for each state.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#MarkovChainHammer.TransitionMatrix.perron_frobenius-Tuple{Any}","page":"Function Index","title":"MarkovChainHammer.TransitionMatrix.perron_frobenius","text":"perron_frobenius(markov_chain)\n\nDescription\n\nCalculate the perron-frobenius matrix from a markov chain.\n\nArguments\n\nmarkov_chain::AbstractVector: A vector of integers representing the state of a markov chain at each time step.\n\nReturns\n\nperron_frobenius_matrix::Matrix: The perron-frobenius matrix of the markov chain.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#MarkovChainHammer.TransitionMatrix.symmetric_generator-Tuple{Any, Any}","page":"Function Index","title":"MarkovChainHammer.TransitionMatrix.symmetric_generator","text":"symmetric_generator(markov_chain, symmetries; dt=1)\n\nDescription\n\nCalculate the generator matrix from a markov chain with symmetries.\n\nArguments\n\nmarkov_chain::AbstractVector: A vector of integers representing the state of a markov chain at each time step.\nsymmetries::AbstractVector: A vector of functions that are symmetries of the markov chain.\ndt::Real: The time step between each state.\n\nReturns\n\ngenerator_matrix::Matrix: The generator matrix of the markov chain.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#MarkovChainHammer.TransitionMatrix.symmetric_perron_frobenius-Tuple{Any, Any}","page":"Function Index","title":"MarkovChainHammer.TransitionMatrix.symmetric_perron_frobenius","text":"symmetric_perron_frobenius(markov_chain, symmetries)\n\nDescription\n\nCalculate the perron-frobenius matrix from a markov chain with symmetries.\n\nArguments\n\nmarkov_chain::AbstractVector: A vector of integers representing the state of a markov chain at each time step.\nsymmetries::AbstractVector: A vector of functions that are symmetries of the markov chain.\n\nReturns\n\nperron_frobenius_matrix::Matrix: The perron-frobenius matrix of the markov chain.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#MarkovChainHammer.Clustering.leicht_newman-Tuple{Any}","page":"Function Index","title":"MarkovChainHammer.Clustering.leicht_newman","text":"leicht_newman(A)\n\nDescription\n\nCompute the communities of a graph using the Leicht Newman algorithm.\n\nArguments\n\nA::AbstractArray: Adjacency matrix of the graph.\n\nReturns\n\nAbstractArray: Array of communities.\n\n\n\n\n\n","category":"method"},{"location":"function_index/#MarkovChainHammer.Utils.histogram-Tuple{Any}","page":"Function Index","title":"MarkovChainHammer.Utils.histogram","text":"histogram(array, bins=minimum([100, length(array)]), normalization=:uniform, custom_range=false)\n\nDescription\n\nCompute the histogram of an array. Useful for barplot in GLMakie.\n\nArguments\n\narray::AbstractArray: Array to compute the histogram of.\nbins::Integer: Number of bins to use.\nnormalization::AbstractArray: Normalization to use. If :uniform, then the normalization is uniform.\ncustom_range::Tuple: Custom range to use. If false, then the range is computed from the data.\n\nReturns\n\nTuple{AbstractArray, AbstractArray}: Tuple of the bin centers and the histogram values.\n\n\n\n\n\n","category":"method"},{"location":"#MarkovChainHammer.jl","page":"Home","title":"MarkovChainHammer.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for MarkovChainHammer.jl. There are several conventions in use throughout the repository: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"All transfer operators are represented as column stochastic matrices\nThe columns of the generator sum to zero\nAll markov chains are vectors of integers from 1 to n, where n is the number of states in the markov chain","category":"page"},{"location":"","page":"Home","title":"Home","text":"For an overview of Markov chains and their use with the present package, see the Markov Chain section. This section contains a review of Markov chains and how to use some of the basic functionality of the repository.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For further details on each module within the repository see the Module Overview section. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"And for a more detailed explanation of the functions within each module, see the Function Index section.","category":"page"},{"location":"module_overview/#sec:module_overview","page":"Overview","title":"Module Overview","text":"","category":"section"},{"location":"module_overview/","page":"Overview","title":"Overview","text":"In this section we will give a brief overview of the modules in this package. The modules are:","category":"page"},{"location":"module_overview/","page":"Overview","title":"Overview","text":"TransitionMatrix\nTrajectory\nClustering\nUtils","category":"page"},{"location":"trajectory/#sec:trajectory","page":"Trajectory","title":"Trajectory","text":"","category":"section"},{"location":"trajectory/","page":"Trajectory","title":"Trajectory","text":"This module generates Markov chains from a transfer operator. The most useful function is the generate function. The generate function takes a transfer operator and a number of steps and returns a Markov chain. ","category":"page"}]
}
